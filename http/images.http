### GET - pobierz wszystkie dane

//GET http://192.168.56.1:3000/api/photos HTTP/1.1
GET http://localhost:3000/api/photos HTTP/1.1


### GET - pobierz jeden element wg id
GET http://localhost:3000/api/photos/1682071552614255 HTTP/1.1

### DELETE - usuń wg id
DELETE http://localhost:3000/api/photos/16823228553562 HTTP/1.1

### PATCH - updatuj wg id
PATCH  http://localhost:3000/api/photos HTTP/1.1
content-type: application/json

{
  "id": 1682072954420687,
  "status": "zmienione 1"
}

### POST - dodaj zdjęcie
POST http://localhost:3000/api/photos HTTP/1.1
Content-Type: multipart/form-data; boundary=----FormBoundary1234

------FormBoundary1234
Content-Disposition: form-data; name="myFile"; filename="input.jpg"
Content-Type: image/jpeg

< ./input.jpg

------FormBoundary1234
Content-Disposition: form-data; name="album"
Content-Type: text/plain

koty
------FormBoundary1234

### PATCH /api/photos/tags - dodaj tag do zdjęcia

PATCH http://localhost:3000/api/photos/tags HTTP/1.1
content-type: application/json

{
    "id": 168658294976855,
    "tag": "#fun"
}

### PATCH /api/photos/tags/mass - dodaj tagi do zdjęcia

PATCH http://localhost:3000/api/photos/tags/mass HTTP/1.1
content-type: application/json

{
    "id": 1684137141238743,
    "tags": ["#fun", "#art", "#photo", "#abc"]
}

### GET /api/photos/tags/12345 - pobierz zdjęcia z tagiem

GET http://localhost:3000/api/photos/tags/1682889498534833 HTTP/1.1

### GET /api/photos/folder_name - pobierz zdjęcia z folderu

GET http://localhost:3000/api/photos/koty HTTP/1.1

